DONE - Move resource in its own module

DONE - Put all the generated files in directory .tuttle (except tuttle_report.html, the entry point of everything accessible from the project)

DONE - should we close stdin ?
	should be tested on *nix

DONE - Tell the user why that resource is deleted :
	- process has changed
	- resource no longer produced
	- ...
	- depends on an invalid resource

DONE - If a process failed, running tuttle again should fail immediately

If a process failed, all should be marked as not Ok

Should we invalidate a resource that has disappeared ?

What should happen if a process fails and tuttle is re-run ?
    - should resources produced by the erroneous process be removed ? No because tuttle would run again endlessly
    - should if ignore the failing process and run other candidates until partial completion then end in error again ? Would
        be the same as an option --build_max_stuff as in gcc
    - should it stop immediately and not run anything ? This is consistent => will be implemented for now DONE

DONE - Check for circular dependencies

DONE - Check for status : if not all dependencies are created the process should be marked as failed

DONE - Remove resources that are invalid

DONE - -Check that the claimed-to-be-created resource really exists at the end of the process, otherwise there have been an issue and any depending process can't pursue

    + Test of a resource not really created by a process should not be invalided when removed

When there is an error running a process, every resources produced by this process should be marked as invalid
	It means that if a process didn't produce one of the expected outputs, every other output must be considered invalid

DONE - Run Functional tests and process states in its own temporary dir

Check if some resources where deleted and invalidate depending resources

shell processor by default (should tests be run according to the os ?)
Move default processor to shell

Improve code coverage
    especially for parser - DONE

DONE - Retrieve duration of common processes from previous workflow

DONE -Ensure that a resource that used to be created by the process but is now a primary resource should not be deleted

NOT FOR THE MOMENT - Stop deleting resources if the time (or % of time) of the work invalidated exceeds a threshold provided by user
    And print invalidation quantity any way

HTTP (DONE) or FTP resource


Remove #! from modules and packages

Check if some primary resources changed

NOT FOR 0.1 - Check if some resource changed (and invalid them ?)

Packaging - partially done

Travis for tests on *nix. Is it possible to test on Windows ? No

Nicer reports :
    DONE - nice html with boostrap
    Done - Embed js in .tuttle
    autorelading iframe for the logs

NOT FOR THE MOMENT - Add a unified log for both stderr and stdout

NOT FOR THE MOMENT - Produce as much data as you can, similar to option --keep-going in Gnu Make

A working example using tuttle in Github, with continuous integration in Travis CI. Car accidents en France ?


"Just run it again..."
	If execution of a workflow failed, it MUST fail again if run again without any change in he workflow. 
	What must not happen : your run a workflow. The 4rth process didn't produce bla.csv as promissed : tuttle stops at the error. No process uses bla.csv. Anyway, if you run tuttle again, it must not produce the rest and succed
	No magic. No surprise

Pop a webserver for functional tests without network ?

DONE - Refactor functional tests with function "run_tuttle" so that it imports tuttle and runs the main function instead of subprocessing : we get coverage !

What should we do if someone tries to invalidate an http resource ?

Remove files (ex .bat files) generated by processes from .tuttle if a a process is invalidated ?

Switch to pytest

Refactor short names Partialy DONE (for the moment)

dump process status and start time just before running and just after, in case somebody would need this info at any time

Create immutable processes from constructor : no more add_input()

Refactor id - DONE

Improve tests on csv2sqlite

Remove csv resource - DONE

A meaningfull example

Ensure we minimise the number of call to exists() and fingerprint()

Write a test for pick_a_failing_process late

Detect corrupted resources through fingerprint