#!/usr/bin/env python
# -*- coding: utf8 -*-

import sys
from os.path import abspath, exists, dirname, join

if getattr(sys, 'frozen', False):
    # frozen
    tuttle_module = join(dirname(abspath(sys.executable)), '..', '..', 'tuttle')
else:
    # unfrozen
    tuttle_module = join(dirname(abspath(__file__)), '..', '..', 'tuttle')
sys.path.insert(0,tuttle_module)

from argparse import ArgumentParser
from tuttle.utils import CurrentDir
from tuttle.version import version
from jinja2 import Template


def get_a_name():
    return abspath(join('.tuttle', 'extensions', 'extension_1'))
    #ext_dir = join('.tuttle', 'extensions', 'extension_*')
    #extensions = glob(ext_dir)
    #'.tuttle', 'extensions',


def extract_variables(variables):
    res = {}
    for var in variables:
        try:
            name, value = var.split("=", 2)
        except ValueError:
            msg = 'Can\'t extract variable from parameter "{}"'.format(var)
            print(msg)
            exit(1)
        res[name] = value
    return res


def main():
    parser = ArgumentParser(
        description="Extends a workflow by adding a templated tuttle project - version {}".format(version)
    )
    parser.add_argument("template", help="template file")
    parser.add_argument('variables', help='variables to insert into the template int the form my_var="my value"', nargs="*")
    parser.add_argument('-w', '--workspace',
                      default='.',
                      dest='workspace',
                      help='Directory where the workspace lies. Default is the current directory')
    parser.add_argument('-n', '--name',
                      default=None,
                      dest='name',
                      help='Name of the extended workflow')
    params = parser.parse_args()

    try:
        with open(params.template, 'rb') as ftpl:
            t = Template(ftpl.read().decode('utf8'))
    except IOError:
        msg = 'Can\'t find template file "{}"'.format(params.template)
        print(msg)
        exit(2)

    vars_dic = extract_variables(params.variables)

    with CurrentDir(params.workspace):
        with open(get_a_name(), 'w') as ext_file:
            content = t.render(**vars_dic)
            ext_file.write(content.encode('utf8)'))

if __name__ == '__main__':
    sys.exit(main())