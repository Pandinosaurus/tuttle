#!/usr/bin/env python
# -*- coding: utf8 -*-

import sys
from os.path import abspath, exists, dirname, join
if getattr(sys, 'frozen', False):
    # frozen
    tuttle_module = join(dirname(abspath(sys.executable)), '..', '..', 'tuttle')
else:
    # unfrozen
    tuttle_module = join(dirname(abspath(__file__)), '..', '..', 'tuttle')
sys.path.insert(0,tuttle_module)

from argparse import ArgumentParser
from tuttle.utils import CurrentDir
from tuttle.version import version
from jinja2 import Template
from os import environ


def get_a_name(prefix):
    # TODO : not scalable if called a lot of times
    i = 1
    name = abspath(join('extensions', "{}{}".format(prefix, i)))
    while exists(name):
        name = abspath(join('extensions', "{}{}".format(prefix, i)))
        i += 1
    return name


def extract_variables(variables):
    res = {}
    for var in variables:
        try:
            name, value = var.split("=", 2)
        except ValueError:
            msg = 'Can\'t extract variable from parameter "{}"'.format(var)
            print(msg)
            exit(1)
        res[name] = value
    return res


def load_template(template):
    try:
        with open(template, 'rb') as ftpl:
            t = Template(ftpl.read().decode('utf8'))
    except IOError:
        msg = 'Can\'t find template file "{}"'.format(template)
        print(msg)
        exit(2)
    return t


def get_tuttle_env():
    try:
        env = environ['TUTTLE_ENV']
    except KeyError:
        msg = 'Can\'t find workspace... Maybe your are not running tuttle-extend-workflow from a preprocessor in a ' \
              'tuttle project'
        print(msg)
        exit(3)
    return env


def render_extension(name, t, tuttle_env, vars_dic):
    with CurrentDir(tuttle_env):
        with open(get_a_name(name), 'w') as ext_file:
            content = t.render(**vars_dic)
            ext_file.write(content.encode('utf8)'))


def main():
    parser = ArgumentParser(
        description="Extends a workflow by adding a templated tuttle project. Must be run from a preprocessor in a "
                    "tuttle project - version {}".format(version)
    )
    parser.add_argument("template", help="template file")
    parser.add_argument('variables', help='variables to insert into the template int the form my_var="my value"',
                        nargs="*")
    parser.add_argument('-n', '--name',
                        default='extension',
                        dest='name',
                        help='Name of the extended workflow')
    params = parser.parse_args()

    t = load_template(params.template)
    vars_dic = extract_variables(params.variables)
    tuttle_env = get_tuttle_env()
    render_extension(params.name, t, tuttle_env, vars_dic)

if __name__ == '__main__':
    sys.exit(main())