#!/usr/bin/env python
# -*- coding: utf8 -*-

import sys
from os.path import abspath, exists, dirname, join

if getattr(sys, 'frozen', False):
    # frozen
    tuttle_module = join(dirname(abspath(sys.executable)), '..', '..', 'tuttle')
else:
    # unfrozen
    tuttle_module = join(dirname(abspath(__file__)), '..', '..', 'tuttle')
sys.path.insert(0,tuttle_module)

from argparse import ArgumentParser
from tuttle.commands import parse_invalidate_and_run, invalidate_resources
from tuttle.utils import CurrentDir
from tuttle.version import version



def main():
    parser = ArgumentParser(
        description="Runs a workflow - version {}".format(version)
    )
    parent_parser = ArgumentParser(
        add_help=False
    )
    parent_parser.add_argument('-f', '--file',
                      default='tuttlefile',
                      dest='tuttlefile',
                      help='Path to the tuttlefile : project file describing the workflow')
    parent_parser.add_argument('-w', '--workspace',
                      default='.',
                      dest='workspace',
                      help='Directory where the workspace lies. Default is the current directory')
    parent_parser.add_argument('-t', '--threshold',
                      default='-1',
                      type=int,
                      dest='threshold',
                      help='Threshold for invalidation : \n'
                           '0 - prevents any invalidation \n'
                           'N - prevents invalidation if lost processing time >= N\n'
                           '-1 (default) - no verification')
    subparsers = parser.add_subparsers(help='commands help', dest='command')
    parser_run = subparsers.add_parser('run', parents=[parent_parser],
                                       help='Run the missing part of workflow')
    parser_invalidate = subparsers.add_parser('invalidate', parents=[parent_parser],
                                              help='Remove some resources already computed and all their dependencies')
    parser_invalidate.add_argument('resources', help='url of the resources to invalidate', nargs="*")
    params = parser.parse_args(sys.argv[1:])

    tuttlefile_path = abspath(params.tuttlefile)
    if not exists(tuttlefile_path):
        print "No tuttlefile"
        sys.exit(2)
    with CurrentDir(params.workspace):
        if params.command == 'run':
            return parse_invalidate_and_run(tuttlefile_path, params.threshold)
        elif params.command == 'invalidate':
            return invalidate_resources(tuttlefile_path, params.resources, params.threshold)


if __name__ == '__main__':
    sys.exit(main())