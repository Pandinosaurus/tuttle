environment:

  matrix:
    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.9"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.9"
      PYTHON_ARCH: "64"

install:
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - "powershell ./appveyor/install.ps1"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r requirements-dev.txt"

build: false  # Not a C# project, build stuff at the test step instead.

test_script:
  # Build the compiled extension and run the project tests
  - "%CMD_IN_ENV% python setup.py nosetests"

  # If tests are successful, create an installable package for the project.
  - "%CMD_IN_ENV% python package4win.py bdist_msi"

  # ... And check that tuttle works
  - copy dist\tuttle-*.msi tuttle-installer.msi
  - msiexec /i tuttle-installer.msi /qn /norestart /log C:\projects\install_tuttle.log
  - cmd: more C:\projects\install_tuttle.log
  - cmd: cd C:\projects\tuttle\samples\demo
  - "\"C:\\Program Files (x86)\\tuttle\\tuttle.exe\" run"
  - cmd: copy penetration_rate.html workflow_execution_success.html

after_test:

artifacts:
  # Archive the generated package in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.msi to github releases